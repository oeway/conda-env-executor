# Conda Environment Executor - AI Assistant Guidelines

## Project Overview
This project implements a robust executor for running Python code in isolated conda environments with the following key features:
- Async/await inline execution support
- Job management (submit, status, cancel, retrieve results)
- Timeout handling
- Shared memory for efficient data passing
- Strong type safety with Pydantic
- Comprehensive test coverage

## Code Generation Rules

### 1. Schema-First Development
- Always define Pydantic models before implementing features
- Place schemas in `conda_env_executor/schemas.py`
- Use strict type hints and field validations
- Document all fields and validation rules

Example schema structure:
```python
from pydantic import BaseModel, Field
from typing import Optional
from datetime import datetime

class ExecutionConfig(BaseModel):
    timeout: Optional[float] = Field(None, description="Execution timeout in seconds")
    env_name: Optional[str] = Field(None, description="Name of conda environment")
```

### 2. Testing Requirements
- Write tests before implementing features
- Place tests in `tests/` directory
- Use pytest fixtures for common setup
- Test both success and failure cases
- Include edge cases and timeout scenarios
- Verify async behavior
- Test shared memory operations
- Run tests after each modification:
  ```bash
  pytest tests/
  pytest tests/test_specific.py -v
  ```

### 3. Code Organization
- Use src layout with conda_env_executor package
- Separate concerns into modules:
  - executor.py: Core execution logic
  - async_executor.py: Async execution support
  - job_manager.py: Job management
  - shared_memory.py: Shared memory operations
  - schemas.py: Pydantic models
  - utils.py: Helper functions

### 4. Error Handling
- Use custom exception classes
- Provide detailed error messages
- Handle timeouts gracefully
- Implement proper cleanup
- Log errors with context

### 5. Documentation
- Add docstrings to all classes and methods
- Include type hints
- Document parameters and return values
- Provide usage examples
- Update README.md with new features

### 6. Async Implementation
- Use asyncio for async operations
- Implement proper cancellation
- Handle timeouts in async context
- Use asyncio.Queue for job management
- Document async behavior

### 7. Job Management
- Implement job states (pending, running, completed, failed, cancelled)
- Use UUIDs for job identification
- Track job metadata (creation time, start time, completion time)
- Support job cancellation
- Handle job timeouts
- Implement job result retrieval

### 8. Shared Memory
- Use shared memory for large data transfers
- Implement proper cleanup
- Handle concurrent access
- Document size limitations
- Implement timeouts

### 9. Type Safety
- Use Pydantic for all data models
- Implement strict validation
- Use TypeVar for generic types
- Document type constraints
- Handle type conversions

### 10. Performance Considerations
- Optimize environment creation
- Cache conda environments
- Minimize data copying
- Use efficient serialization
- Monitor memory usage

## Example Usage

```python
from conda_env_executor import CondaEnvExecutor, Job

# Synchronous execution
executor = CondaEnvExecutor(env_spec="environment.yml")
result = executor.execute("def execute(): return 42")

# Asynchronous execution
async with AsyncCondaEnvExecutor(env_spec="environment.yml") as executor:
    job = await executor.submit_job(
        Job(
            code="def execute(): return 42",
            config=ExecutionConfig(timeout=30)
        )
    )
    result = await executor.wait_for_result(job.id)
```

## Testing Guidelines

1. Unit Tests:
   - Test individual components
   - Mock external dependencies
   - Test error conditions
   - Verify timeout handling

2. Integration Tests:
   - Test component interactions
   - Verify end-to-end workflows
   - Test with real conda environments
   - Verify cleanup

3. Performance Tests:
   - Test with large datasets
   - Measure execution times
   - Verify memory usage
   - Test concurrent execution

## Commit Guidelines
- Write clear commit messages
- Reference issue numbers
- Describe breaking changes
- Update tests with changes
- Run full test suite before commit
